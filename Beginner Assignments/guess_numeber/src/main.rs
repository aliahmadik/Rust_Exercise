use colored::Colorize;
use rand::{Rng, rngs::ThreadRng};
use std::{
    io::{self, Write},
    string,
};

fn main() {
    // set the level of game
    print!("please provide game level:");
    io::stdout().flush().expect("failed to flush out");
    let mut level: String = String::new();
    std::io::stdin()
        .read_line(&mut level)
        .expect("Error in input!!");
    let level: i32 = level.trim().parse().expect("Error in type casting");

    let mut user_guess: String = String::new();
    loop {
        user_guess.clear();
        print!("please guess a number  => ");
        io::stdout().flush().expect("failed to flush out");
        std::io::stdin()
            .read_line(&mut user_guess)
            .expect("Error in input!!");
        if valid_number(&user_guess.to_string()) {
            user_guess = user_guess.trim().to_string();
            break;
        } else {
            println!(
                "please provide a number with not repeated digit and not start with zero!!!! guess again."
            )
        }
    }

    let comp_guess = random_guess(level);

    loop {
        if guess_evaluation(&user_guess, &comp_guess) == true {
            println!("{}", "congrats!!!!".blue());
            break;
        } else {
            loop {
                print!("new guess => ");
                io::stdout().flush().expect("failed to flush out");
                user_guess.clear();
                std::io::stdin()
                    .read_line(&mut user_guess)
                    .expect("Error in input!!");
                if valid_number(&user_guess.trim().to_string()) {
                    user_guess = user_guess.trim().to_string();
                    break;
                } else {
                    println!(
                        "please provide a number with not repeated digit and not start with zero!!!! guess again."
                    )
                }
            }
        }
    }
}

fn random_guess(level: i32) -> String {
    let mut rng = rand::thread_rng();
    loop {
        let ran_gen: i32 = match level {
            1 => rng.gen_range(0..1000),
            2 => rng.gen_range(0..10000),
            _ => rng.gen_range(0..100000),
        };
        if valid_number(&ran_gen.to_string()) {
            return ran_gen.to_string();
        }
    }
}

fn guess_evaluation(user_guess: &String, comp_guess: &String) -> bool {
    let user_array: Vec<char> = user_guess.chars().collect();
    let comp_array: Vec<char> = comp_guess.chars().collect();

    if user_array.len() != comp_array.len() {
        println!("Error: Lengths of user_guess and comp_guess do not match!");
        return false;
    }

    let mut guard = true;
    for (user_char, comp_char) in user_array.iter().zip(comp_array.iter()) {
        if user_char == comp_char {
            print!("{}", user_char.to_string().green());
        } else if comp_guess.contains(*user_char) {
            print!("{}", user_char.to_string().yellow());
            guard = false;
        } else {
            print!("{}", user_char.to_string().red());
            guard = false;
        }
    }
    println!();
    guard
}

// check the validity of number provided by user or randomly generated by computer
fn valid_number(number: &String) -> bool {
    if number.starts_with("0") {
        false
    } else {
        for ch in number.chars() {
            if number.chars().filter(|&c| c == ch).count() >= 2 {
                return false;
            }
        }
        true
    }
}
